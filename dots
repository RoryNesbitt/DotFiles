#!/usr/bin/env sh

help() {
  #TODO: help for each command
  echo "Usage:
  dots add              Add a file to the dots repo
  dots remove           Remove a file from the dots repo
  dots link             Symlink the files
  dots unlink           Remove the symlink
  dots help             Print this page then exit

Options:
  -h                    Print the help. Can be used after an above option"
}

add() {
  while getopts ':hDf' opts; do
    case $opts in
      h)
        help add
        exit
        ;;
      D)
        dryrun=true
        ;;
      f)
        force ""
        ;;
      --)
        break
        ;;
      *)
        echo "Invalid option provided"
        echo "Exiting"
        exit 1
        ;;
    esac
  done
  shift $((OPTIND-1))

  for file in "$@"
  do
    if [ ! -e "$file" ] && [ ! -L "$file" ]; then # doesn't exists
      echo "$file not found"
      continue
    fi
    path=$(path_from_home "$file")
    if [ "$path" = false ]; then
      echo "$file is outwith \$HOME"
      continue
    fi
    if [ -d "$file" ]; then # directory
      file=$(walk_dir "$file")
    fi

    for f in $file; do
      path=$(path_from_home "$f")

      if [ "$force" = true ] && [ -e "$repo_location$path" ]; then
        rm "$repo_location$path"
      elif [ ! "$force" = true ]; then
        if [ -f "$f" ] && [ -e "$repo_location$path" ]; then # file
          echo "$path has already been stored. Overwrite it with -f or replace local with link -f"
          continue
        fi
      fi

      if [ "$dryrun" = true ]; then
        echo "Dry run:"
      else
        mkdir -p "$repo_location$path"
        rm -d "$repo_location$path" #HACK: mkdir should be given the dir path not the file path
        mv "$f" "$repo_location$path"
        ln -s "$repo_location$path" "$f"
      fi
      echo "Added \$HOME$path"
    done
  done
}

remove(){
  while getopts ':hDfyn' opts; do
    case $opts in
      h)
        help remove
        exit
        ;;
      D)
        dryrun=true
        ;;
      f)
        force ""
        ;;
      y)
        keep_local=true
        ;;
      n)
        keep_local=false
        ;;
      --)
        break
        ;;
      *)
        echo "Invalid option provided"
        echo "Exiting"
        exit 1
        ;;
    esac
  done
  shift $((OPTIND-1))

  if [ "$keep_local" = "" ]; then
    echo "Do you want to keep the local file? [Yn]"
    read -r yn
    case $yn in
      "" | [Yy] | [Yy][Ee][Ss] )
        keep_local=true
        ;;
      [Nn] | [Nn][Oo] )
        keep_local=false
        ;;
      *)
        echo "Option not recognised"
        exit
        ;;
    esac
  fi

  for file in "$@"
  do
    if [ ! -e "$file" ] && [ ! -L "$file" ]; then # doesn't exists
      echo "$file not found"
      continue
    fi
    if [ -d "$file" ]; then # directory
      dir="$file"
      file=$(walk_dir "$file")
    fi

    for f in $file; do
      path=$(path_from_home "$f")
      if [ "$path" = false ]; then
        echo "$f is outwith \$HOME"
        continue
      elif [ ! -e "$HOME$path" ]; then
        echo "$f is not in your \$HOME"
        continue
      elif [ ! -e "$repo_location$path" ]; then
        echo "$f is not in the dots repo"
        continue
      fi
      if [ "$keep_local" = true ] && [ "$force" = true ] || [ -L "$HOME$path" ]; then
        [ ! "$dryrun" = true ] && rm "$HOME$path"
      elif [ "$keep_local" = true ]; then
        echo "$HOME$path is not a symlink. Remove repo copy with -n or overwrite local with -f"
        continue
      fi
      if [ "$dryrun" = true ]; then
        echo "Dry run:"
      elif [ "$keep_local" = true ];then
        mv "$repo_location$path" "$HOME$path"
      else
        rm "$repo_location$path"
      fi
      echo "Removed $path"
    done
    if [ ! "$dryrun" = true ] && [ "$repo_location" != "" ] && [ "$dir" != "" ]; then
      [ -d "$repo_location/$dir" ] && rm -rf "$repo_location/$dir"
      if [ ! "$keep_local" = true ] && [ -d "$HOME/$dir" ]; then
        rm -rf "$HOME/$dir"
      fi
    fi
  done
}

link() {
  while getopts ':hDf' opts; do
    case $opts in
      h)
        help link
        exit
        ;;
      D)
        dryrun=true
        ;;
      f)
        force ""
        ;;
      --)
        break
        ;;
      *)
        echo "Invalid option provided"
        echo "Exiting"
        exit 1
        ;;
    esac
  done
  shift $((OPTIND-1))

  for file in "$@"
  do
    if [ ! -e "$file" ] && [ ! -L "$file" ]; then # doesn't exists
      echo "$file not found"
      continue
    fi
    path=$(path_from_home "$file")
    if [ "$path" = false ]; then
      echo "$file is outwith \$HOME"
      continue
    fi
    if [ -d "$file" ]; then # directory
      file=$(walk_dir "$file")
    fi

    for f in $file; do
      path=$(path_from_home "$f")

      if [ ! -e "$repo_location$path" ]; then
        echo "$f is not in the dots repo"
        continue
      elif [ "$force" = true ]; then
        rm -f "$HOME$path"
      elif [ -L "$HOME$path" ]; then
        echo "$f is already linked"
        continue
      elif [ ! "$force" = true ]; then
        if [ -f "$f" ] && [ -e "$HOME$path" ]; then # file
          echo "$path already exists. Overwrite it with -f or replace stored copy with add -f"
          continue
        fi
      fi

      if [ "$dryrun" = true ]; then
        echo "Dry run:"
      else
        mkdir -p "$HOME$path"
        rm -d "$HOME$path" #HACK: mkdir should be given the dir path not the file path
        ln -s "$f" "$HOME$path"
      fi
      echo "Linked \$HOME$path"
    done
  done
}

unlink() {
  while getopts ':hDf' opts; do
    case $opts in
      h)
        help unlink
        exit
        ;;
      D)
        dryrun=true
        ;;
      f)
        force ""
        ;;
      --)
        break
        ;;
      *)
        echo "Invalid option provided"
        echo "Exiting"
        exit 1
        ;;
    esac
  done
  shift $((OPTIND-1))

  for file in "$@"
  do
    if [ ! -e "$file" ] && [ ! -L "$file" ]; then # doesn't exists
      echo "$file not found"
      continue
    fi
    if [ -d "$file" ]; then # directory
      dir="$file"
      file=$(walk_dir "$file")
    fi

    for f in $file; do
      path=$(path_from_home "$f")
      if [ "$path" = false ]; then
        echo "$f is outwith \$HOME"
        continue
      elif [ ! -e "$repo_location$path" ]; then
        echo "$f is not in the dots repo"
        continue
      fi
      if [ "$force" = true ] || [ -L "$HOME$path" ]; then
        [ ! "$dryrun" = true ] && rm "$HOME$path"
      else
        echo "$HOME$path is not a symlink. Overwrite local with -f"
        continue
      fi
      if [ "$dryrun" = true ]; then
        echo "Dry run:"
      else
        cp "$repo_location$path" "$HOME$path"
      fi
      echo "Unlinked $path"
    done
  done
}

directory_path() {
  dirname "$(readlink -e -- "$1")"
}

is_ignored() {
  found=false
  for i in $ignoreList; do
    case "$1" in
      *"." | *".." | *"*" | "$repo_location/$script_name" | "$repo_location$i" | "$repo_location/$i")
        found=true
        break
        ;;
    esac
  done
  $found
}

walk_dir() {
  for g in "/.*" "/*"; do
    for pathname in "$1"$g; do
      if is_ignored "$pathname"; then
        continue # skip these directories
      elif [ -d "$pathname" ]; then
        walk_dir "$pathname"
      else
        printf '%s ' "$pathname"
        # echo "$pathname"
      fi
    done
  done
}

path_from_home() {
  absolute="$(readlink -e -- "$1")"
  [ "$absolute" = "" ] && absolute="$1"
  case $absolute in
    "$repo_location"*)
      echo "${absolute#"$repo_location"}"
      ;;
    "$HOME"*)
      echo "${absolute#"$HOME"}"
      ;;
    *)
      echo false
      ;;
  esac

}

# Get the path to the dotfile repo
repo_location=$(directory_path "$0")
script_name=$(basename "$0")

# Build the ignore list
ignoreList=".git .gitignore .dotignore .dotsignore README LICENSE"
[ -f "$repo_location/.dotignore" ] && ignoreList="$ignoreList "$(tr '\n' ' ' < "$repo_location/.dotignore")
[ -f "$repo_location/.dotsignore" ] && ignoreList="$ignoreList "$(tr '\n' ' ' < "$repo_location/.dotsignore")

force() {
  echo "Force will disable all saftey checks."
  echo "It is not recommended unless completely necessary."
  echo "Are you sure? [yN]"
  read -r yn
  case $yn in
    [Yy] | [Yy][Ee][Ss] )
      force=true
      ;;
    "" | [Nn] | [Nn][Oo] )
      echo "Good choice :)"
      exit
      ;;
    *)
      echo "Option not recognised"
      exit
  esac
  run_cmd "$@" # to let the function be called by name, e.g. dots force add ..
}

verbose() {
  get_wordy=true
  run_cmd "$@"
}

run_cmd() {
  cmd="$1"
  if command -V "$cmd" 2> /dev/null | grep -qwi function; then
    shift 1
    $cmd "$@"
  fi
}

while getopts ':dfvh' opts; do
  case $opts in
    d)
      echo "$repo_location"
      ;;
    f)
      force ""
      ;;
    v)
      verbose ""
      ;;
    h)
      help
      exit
      ;;
    *)
      echo "Invalid option provided"
      echo "Exiting"
      exit 1
      ;;
  esac
done
shift $((OPTIND-1))

run_cmd "$@"
