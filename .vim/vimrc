let mapleader=" "
syntax on                       " Syntax highlighting
set background=dark             " changes the colours to fit with a dark background
set t_Co=256                    "
filetype plugin indent on       " enable file type indenting && language dependent indenting
set mouse=a		                " Enable mouse usage (all modes)

"Tabs
set tabstop=4 softtabstop=4     "
set shiftwidth=4                "
set expandtab                   "
set smartindent                 "
set autoindent                  "

"Numbers
set number                      "
set relativenumber              "
set ruler                       "

"Search
set nohlsearch                  " Stop hl when search stops
set incsearch		            " Highlight as you search
set ignorecase		            " Do case insensitive matching
set smartcase		            " Do smart case matching

"History
set noswapfile                  "
set nobackup                    "
set undodir=~/.vim/undo         "
set undofile                    "
set hidden		                " Hide buffers when they are abandoned

"Disable Arrow keys in Normal mode
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>

"Disable Arrow keys in Insert mode
"imap <up> <nop>
"imap <down> <nop>
"imap <left> <nop>
"imap <right> <nop>

"cursor lines
"set cursorline
set cursorcolumn
"highlight CursorLine ctermbg=yellow cterm=bold guibg=#2b2b2b
highlight Cursorcolumn ctermbg=yellow cterm=bold guibg=#2b2b2b

"splitview
set splitbelow                  " split down
set splitright                  " vertical split right

"Misc
set exrc                        " Loads directory specific .vimrc files
set noerrorbells                " Silence
"set colorcolumn=80             " Adds a colour marker on the # column
set signcolumn=yes              "
set scrolloff=6                 " Keeps the cursor away from the top/bottom of the page
set showmatch		            " Show matching brackets.
set showcmd		                " Show (partial) command in status line.
set wildmode=longest,list,full  " Enable autocomplete files

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"WSL
"WSL Cipboard
func! GetSelectedText()
    normal gv"xy
    let result = getreg("x")
    return result
endfunc

"Change cursor in different modes
if &term =~ "xterm"
    autocmd VimEnter * silent !echo -ne "\e[2 q"
    let &t_SI = "\<Esc>[6 q"                        " Insert mode       Verticle bar
    let &t_SR = "\<Esc>[4 q"                        " Replace mode      underscore
    let &t_EI = "\<Esc>[2 q"                        " Normal mode       Block
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"AutoCmds
"remove trailing whitespace
autocmd BufWritePre * %s/\s\+$//e

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Shortcuts
"WSL clipboard
if !has("clipboard") && executable("clip.exe")
    noremap <C-C> :call system('clip.exe', GetSelectedText())<CR>
    noremap <C-X> :call system('clip.exe', GetSelectedText())<CR>gvx
    noremap <leader>c :call system('clip.exe', GetSelectedText())<CR>
    noremap <leader>x :call system('clip.exe', GetSelectedText())<CR>gvx
endif

"set spellcheck
map <leader>l :setlocal spell spell! spelllang=en_gb<CR>

"run shellcheck on current file
map <leader>p :!clear && shellcheck %<cr>

"Open windows
nnoremap <leader>v :vsp ./
nnoremap <leader>t :vertical terminal<cr>

"split navigation
map <C-h> <c-w>h
map <C-j> <c-w>j
map <C-k> <c-w>k
map <C-l> <c-w>l
map <leader>h :wincmd h<cr>
map <leader>j :wincmd j<cr>
map <leader>k :wincmd k<cr>
map <leader>l :wincmd l<cr>

"search
"replace in line
noremap <leader>s :s//gI<Left><Left><Left>
"replace in file
noremap <leader>S :%s//gI<Left><Left><Left>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'tomasiser/vim-code-dark'
Plug 'preservim/NERDTree'
Plug 'airblade/vim-gitgutter'
Plug 'vim-airline/vim-airline'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-surround'
Plug 'alvan/vim-closetag'
call plug#end()
"coc
let g:coc_global_extensions = [
    \ 'coc-json',
    \ 'coc-pairs'
    \ ]

"NERDTree
map <F5> :NERDTreeToggle<CR>
nnoremap <leader>n :NERDTreeFind<CR>
"airline
let g:airline#extensions#tabline#enabled = 1
"colorscheme
colorscheme codedark
let g:airline_theme = 'codedark'
"coc
let g:coc_disable_startup_warning = 1

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-closetag
" filenames like *.xml, *.html, *.xhtml, ...
" These are the file extensions where this plugin is enabled.
let g:closetag_filenames = '*.html,*.xhtml,*.phtml,*.php,*.js,*.jsx,*.tsx'
" filenames like *.xml, *.xhtml, ...
" This will make the list of non-closing tags self-closing in the specified files.
let g:closetag_xhtml_filenames = '*.xhtml,*.jsx'
" filetypes like xml, html, xhtml, ...
" These are the file types where this plugin is enabled.
let g:closetag_filetypes = 'html,xhtml,phtml'
" filetypes like xml, xhtml, ...
" This will make the list of non-closing tags self-closing in the specified files.
let g:closetag_xhtml_filetypes = 'xhtml,jsx'
" integer value [0|1]
" This will make the list of non-closing tags case-sensitive (e.g. `<Link>` will be closed while `<link>` won't.)
let g:closetag_emptyTags_caseSensitive = 1
" dict
" Disables auto-close if not in a "valid" region (based on filetype)
let g:closetag_regions = {
    \ 'typescript.tsx': 'jsxRegion,tsxRegion',
    \ 'javascript.jsx': 'jsxRegion',
    \ 'typescriptreact': 'jsxRegion,tsxRegion',
    \ 'javascriptreact': 'jsxRegion',
    \ }
" Shortcut for closing tags, default is '>'
let g:closetag_shortcut = '>'
" Add > at current position without closing the current tag, default is ''
let g:closetag_close_shortcut = '<leader>>'
